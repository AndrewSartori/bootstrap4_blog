<% include ../partials/header %>

<!-- Page Header -->
<header class="masthead" style="background-image: url('img/about-bg.jpg')">
  <div class="overlay"></div>
  <div class="container">
    <div class="row">
      <div class="col-lg-8 col-md-10 mx-auto">
        <div class="page-heading">
          <h1>Arrays</h1>
          <span class="subheading"></span>
        </div>
      </div>
    </div>
  </div>
</header>

  <!-- Post Content -->
  <article>
    <div class="container">
      <div class="row">
        <div class="col-lg-8 col-md-10 mx-auto">
            <div>
            	<h3>Intro to Arrays</h3>
            	<ul>
            		<li>
            			Arrays are data structures that group data into a list. Arrays are indexed. This means that the elements that comprise an array (the different pieces of data that are separated by commas) have a number automatically assigned to them. This number refers to the position of a specific element within the array. Each array is "indexed" starting at 0, thus, the first element within an array is indexed as 0.
            			<ul>
            				<li>
            					var friends = ["charlie", "liz", "david", "mattias"]; <br>
            					friends[0]  (will return "charlie")
            				</li>
            				<li>
            					If I want to change the value of an element within the array: <br>
            					friends[0] = "chuck"; <br>
            					friends[0]  (will now return "chuck")
            				</li>
            				<li>
            					If I want to add an element to the array, I do so in a similar way to changing an element within the array. Since there are only 3 elements indexed in the current array, adding another element is done by assigning a value to the next element in the array: <br>
            					friends[4] = Derek; <br>
            					<ul>
            						<li>
            							If I mistake where the new element should be indexed and I say "friends[8] = Derek;", my array will still index "Derek" at [8], but the JS engine will also create "undefined" variables to take up the space between friends[8] and friends[3].
            						</li>
            					</ul>
            				</li>
            			</ul>
            		</li>
            		<li>
            			Arrays can be initialized even if they are empty, I assume because the contents will be filled by some function.
            			<ul>
            				<li>
            					var friends = []; 
            				</li>
            			</ul>
            		</li>
            		<li>
            			Arrays can hold any type of data, and they can hold different types of data in the same array.
            			<ul>
            				<li>
            					var random_collection = [88, "Dogs", true, null];
            				</li>
            			</ul>
            		</li>
            		<li>
            			Arrays have a length property
            			<ul>
            				<li>
            					var numbers = [45, 22, 95, 340]; <br>
            					numbers.length  (will return 4, which is how many elements are in the array, not the terminal element's index)
            				</li>
            			</ul>
            		</li>
            		<li>
            			An array can be an indexed element within another array. Placing an array inside of an array is called "nesting" an array, or a "nested" array.
            			<ul>
            				<li>
            					var friendGroups = [<br>
            					....["david", "kyle", "tyler"],<br>
            					....["darnell", "derek", "synthian"],<br>
            					....["harry", "larry", "moe"]<br>
            					];<br>
            					friendGroups[2][0];  (this grabs the 2nd indexed element within the array {which is the harry, larry, and moe array} and looks for the 0 indexed element within that array.)
            					<ul>
            						<li>
            							
            						</li>
            					</ul>
            				</li>
            			</ul>
            		</li>
            	</ul>
            </div>
            
            <div>
            	<h3>Array Methods</h3>
            	<ul>
            		<li>
            			Methods are functions that are stored as a property of an object. <i>A "method" is an action that can be performed on an object.</i>
            		</li>
            		<li>
            			A JS method is a property containing a function definition.
            		</li>
            	</ul>
            </div>
            <div>
            	<h3>push()</h3>
            	<ul>
            		<li>
            			Adds an element to the end of an array. The "push" array always calculates where the end of the array is, so it never needs to be specified.
            			<ul>
            				<li>
            					arrayName.push("newElement");
            				</li>
            			</ul>
            		</li>
            	</ul>
            	<h3>pop()</h3>
            	<ul>
            		<li>
            			Removes, and returns, the <i>last</i> element from an array. Pop() is frequently used to remove an element from an array in order to do something to said element.
            			<ul>
            				<li>
            					arrayName.pop()  (will return the last indexed element, and that element will immediately disappear from said array)
            					<ul>
            						<li>
            							If I want to do something to/with the popped last element, I have to assign the value of the popped element to a new variable. <br>
            							var poppedElement = arrayName.pop();
            						</li>
            					</ul>
            
            				</li>
            			</ul>
            		</li>
            	</ul>
            </div>
            
            <div>
            	<h3>unshift()</h3>
            	<ul>
            		<li>
            			Add elements to the beginning of an array (whereas push() adds elements to the end of an array). 
            			<ul>
            				<li>
            					arrayName.unshift("infrared")   (will add "infrared" to the beginning of the array) 
            				</li>
            			</ul>
            		</li>
            	</ul>
            	<h3>shift()</h3>
            	<ul>
            		<li>
            			Removes, and returns, the <i>first</i> element from an array. The fact that shift() returns the value means that it is saved in memory and, thus, could be manipulated.
            			<ul>
            				<li>
            					arrayName.shift(); (will return the first indexed element in the array, and that element will immediately disappear from said array)
            					<ul>
            						<li>
            							If I want to do something to/with the shifted first element, I have to assign the value of the shifted element to a new variable. <br>
            							var shiftedElement = arrayName.shift();
            						</li>
            					</ul>
            				</li>
            			</ul>
            		</li>
            	</ul>
            </div>
            
            <div>
            	<h3>indexOf()</h3>
            	<ul>
            		<li>
            			Can't find an element in your array? Array so large you couldn't possibly find an indexed element? Want to quickly, and easily, find the index of an item within an array? Use IndexOf.
            			<ul>
            				<li>
            					arrayOfTheAlphabet.indexOf("j");   (will return the index at which the letter "j" can be found, thus, will return <b>9</b>)
            					<ul>
            						<li>
            							If there are multiple elements in the array which are identical (imagine I put the letter "j" after "i", and then again after "z"), <b>indexOf identifies the first instance of the element, not the second</b>
            						</li>
            					</ul>
            				</li>
            				<li>
            					arrayOfTheAlphabet.indexOf("Jeremy");  (will return <b>-1</b> because indexOf() returns <b>-1</b> for any value that is not indexed in the array. This makes sense, seing as the first indexed element of an array is 0, thus -1 is clearly something before the first element and/or non-existent)
            				</li>
            			</ul>
            		</li>
            	</ul>
            </div>
            
            <div>
            	<h3>Slice()</h3>
            	<ul>
            		<li> 
            			Used to copy parts of an array. Using slice() does not affect the original array, only creates a new array with elements from the original.<br>
            			If my array is called <i>var fruits = ["banana", "orange", "lemon", "strawberry", "apple", "mango"]</i> and I want to slice the citrus fruits off into their own array, this is how it would happen:
            			<ul>
            				<li>
            					var citrus = fruits.slice(1,3); 
            					<ul>
            						<li>
            							The slice() method takes two arguments: the specific index where the new array starts (ie: 1, for "orange") <i><b>and</b></i> the specific index of the ending element (ie: 3, because the slice() method includes the elements before the ending element. The slice() method does not count the ending element.)
            						</li>
            					</ul>
            				</li>
            			</ul>
            		</li>
            		<li>
            			slice() can be used to copy an entire array instead of just sections. below, the entire array is being sliced (copied) into a variable.
            			<ul>
            				<li>
            					var numbers = [1,2,3,4,5]; <br>
            					var otherNumbers = numbers.slice();
            				</li>
            			</ul>
            		</li>
            	</ul>
            	<h3>Splice()</h3>
            	<ul>
            		<li>
            			Removes elements from an array. Same arguments as slice() and same logic except that, with splice(), those "copied elements" are just removed from the array.
            			<ul>
            				<li>
            					numbers.splice(1,1); <br>
            					document.write(numbers);  (will delete the first element in the array, number 2)
            				</li>
            			</ul>
            		</li>
            	</ul>
            </div>
            
            <div>
            	<h3>JavaScript TO-DO List</h3>
            	<ul>
            		<li>
            			NEW
            			<ul>
            				<li>
            					Add an item to your TO-DO list
            				</li>
            			</ul>
            		</li>
            		<li>
            			LIST
            			<ul>
            				<li>
            					View your TO-DO list
            				</li>
            			</ul>
            		</li>
            		<li>
            			DELETE
            			<ul>
            				<li>
            					Delete an item from the TO-DO list
            				</li>
            			</ul>
            		</li>
            		<li>
            			QUIT
            			<ul>
            				<li>
            					Quit TO-DO list
            				</li>
            			</ul>
            		</li>
            	</ul>
            	<button onclick="toDo()">Start TO-DO List</button>
            
            	<h3>Array Problems</h3>
            	<ul>
            		<li>
            			Print Reverse
            			<ul>
            				<li>
            					Write a function, printReverse(), that takes an array as an argument and prints out the elements in the array in reverse order. <br>
            					<button onclick="printReverse()">Click Me</button>
            				</li>
            			</ul>
            		</li>
            		<li>
            			isUniform()
            			<ul>
            				<li>
            					Write a function isUniform() which takes an array as an argument and returns "true" if all elements in the array are identical.<br>
            					<button onclick="isUniform()">Click Me</button>
            				</li>
            			</ul>
            		</li>
            		<li>
            			sumArray()
            			<ul>
            				<li>
            					Write a function sumArray() that accepts an array of numbers and returns the sum of all numbers in the array.<br>
            					<button onclick="sumArray()">Click Me</button>
            				</li>
            			</ul>
            		</li>
            		<li>
            			max()
            			<ul>
            				<li>
            					Write a function max() that accepts an array of numbers and returns the maximum number in the array.<br>
            					<button onclick="max()">Click Me</button>
            				</li>
            			</ul>
            		</li>
            	</ul>
            </div>
            
            <div>
            	<h3>Array Iteration</h3>
            	<p>
            		<i>How to access, and do something to, every element within an array using forEach loops.</i>
            	</p>
            	<p>
            		This is <b>extremely important</b> because I will be using JS to create HTML elements in the future, and the only intelligent way to build a website for millions of people is to use as little hardcoded HTML as possible. Creating HTML elements using JS, and based on the user's input, is how JS developers work.
            	</p>
            	<p>
            		We have a list of data and we want to do something to that list of data. 
            	</p>
            
            	<h2>for loop VS forEach()</h2>
            	<h3>for loop</h3>
            	<ul>
            		<li>
            			Below, i = 0 because I am creating a new variable within the for loop that i can use to just keep track of what number (which corresponds to the indexed element of the same number) I am currently on in the loop. I then use that number variable, "i", to count up and down or whatever direction or way i want to count up or down. Then, I apply that number counting variable to the array via the "alert()".
            		</li>
            		<li>
            			Additoinally, "i" stops counting once "i" is equal to the number of elements in the array. This is accomplished via .length
            		</li>
            		<li>
            			var colors = ["black", "green" "blue", "orange"];<br>
            			for (var i = 0; i < colors.length; i++) {<br>
            			....alert(colors[i]);<br>
            			}
            		</li>
            	</ul>
            	<h3>forEach()</h3>
            	<p><b><i>arrayName.forEach(functionRunOnArray)</i></b></p>
            	<p>
            		Javascript provides an easy, built-in method for iterating over arrays: forEach(). This method is defined on every array and is part of the "array prototype", which is the skeleton of what an array is and what it can do. All array methods are included in the array prototype. forEach is a method which appends to the name of the array via dot notation. This method also takes a function as an argument, thus, I can write anonymous functions within forEach() that will only apply to the array, itself. This DRYs up code considerably.
            	</p>
            	<ul>
            		<li>
            			Using the same example above, "colors", forEach() would be used as such: <br>
            			colors.forEach(function(){<br>
            			....alert("Do something to each color");<br>
            			};)
            		</li>
            	</ul>
            	<h3>The differences?</h3>
            	<ul>
            		<li>
            			for loops uses a number, to start at 0, and increment until the final indexed element in the array. That number is then applied to the array, but the for loop is a conditional focused on what number to start on, what number to finish on, and how many numbers to count up/down by to get from the first number to the last number. 
            		</li>
            		<li>
            			forEach() is a method purpose built to execute code <i>for each element in an array</i>.
            		</li>
            	</ul>
            
            </div>

        </div>
      </div>
    </div>
  </article>


<script type="text/javascript">
// TO-DO app
function toDo() {
	var theList = ["Buy new turtle"];
	var theFunList = "**********" + theList + "**********";
	var startProgram = prompt("What would you like to do?");

	while(startProgram !== "QUIT" || startProgram !== "quit") {

		if (startProgram == "NEW" || startProgram == "new") {
			var newItem = prompt("What would you like to add to your TO-DO list?");
			theList.push(newItem);
			alert("Here is your new TO-DO list:" + theFunList);
			console.log(theFunList);
		} else if (startProgram == "LIST" || startProgram == "list") {
			alert(theFunList);
			console.log(theFunList);
		} else if (startProgram == "DELETE" || startProgram == "delete") {
			var deletrious = prompt("Which list item would you like to delete?" + theFunList)
			theList.splice(deletrious, 1);
			prompt("Here is your updated list: " + theFunList);
		} else {
			alert("Quitting TO-DO List")
			return
		}
		startProgram = prompt("What would you like to do?");
		
	}	
};

// Print Reverse
function printReverse(argument1) {
	for (var i = argument1.length - 1; i >= 0; i--) {
		console.log(argument1[i]);
	}
}
printReverse(["David", "Tina", "John", "Daniel"]);

// is Uniform
function isUniform(arr) {
	var first = arr[0];
	for (var i  = 1; i < arr.length; i++) {
		if (arr[i] !== first) {
			return false;
		}
	}
	return true;
}

// Sum Array
function sumArray(arr) {
	var total = 0;
	arr.forEach(function(element){
		total += element;
	});
	return total;
}


// Max element
function max(arr) {
	var max = arr[0];
	for (var i = 1; i < arr.length; i++ {
		if (arr[i] > max) {
			max = arr[i];
		}
	}
	return max;
}

// TO-DO APP SOLUTION
// Make all of the functions outside of the while loop, then just pass in those function names
// var todos = ["Buy New Turtle"];

// var input = prompt("What would you like to do?");

// while(input !== "quit"){
// 	//handle input
// 	if(input === "list") {
// 		printList();
// 	} else if(input === "new") {
// 		addTodo();
// 	} else if(input === "delete") {
// 		deleteTodo();
// 	}
// 	//ask again for new input
// 	input = prompt("What would you like to do?");
// }
// console.log("OK, YOU QUIT THE APP");

// function printList() {
// 	console.log("**********");
// 	todos.forEach(function(todo, index){
// 		console.log(index + ": " + todo);
// 	});
// 	console.log("**********");
// }

// function addTodo(){
// 	//ask for new todo
// 	var newTodo = prompt("Enter new todo");
// 	//add to todos array
// 	todos.push(newTodo);
// 	console.log(newTodo + " added to list")
// }

// function deleteTodo(){
// 	var index = prompt("Enter index of todo to delete");
// 	// BELOW is the start of the splice, "index", followed by the number of elements that I want to delete following the start of the splice. Here, that number is  "1".
// 	todos.splice(index, 1);
// 	console.log("Todo Removed")
// }

</script>

<% include ../partials/footer %>